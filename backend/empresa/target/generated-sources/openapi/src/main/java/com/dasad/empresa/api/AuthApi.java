/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dasad.empresa.api;

import com.dasad.empresa.model.Login400Response;
import com.dasad.empresa.model.LoginRequestDTO;
import com.dasad.empresa.model.LoginResponseDTO;
import com.dasad.empresa.model.Register400Response;
import com.dasad.empresa.model.RegisterRequestDTO;
import com.dasad.empresa.model.RevokeToken200Response;
import com.dasad.empresa.model.RevokeToken400Response;
import com.dasad.empresa.model.RevokeTokenRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-02T10:06:15.811723800Z[Europe/Lisbon]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Auth", description = "Operações relacionadas a autenticação")
public interface AuthApi {

    /**
     * POST /auth/login : Login endpoint
     * Endpoint para autenticação de usuários.
     *
     * @param loginRequestDTO  (required)
     * @return Login bem-sucedido (status code 200)
     *         or Requisição inválida (status code 400)
     */
    @Operation(
        operationId = "login",
        summary = "Login endpoint",
        description = "Endpoint para autenticação de usuários.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Login bem-sucedido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Requisição inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Login400Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<LoginResponseDTO> login(
        @Parameter(name = "LoginRequestDTO", description = "", required = true) @Valid @RequestBody LoginRequestDTO loginRequestDTO
    );


    /**
     * POST /auth/register : Register endpoint
     * Endpoint para registrar novos usuários.
     *
     * @param registerRequestDTO  (required)
     * @return Registro bem-sucedido (status code 200)
     *         or Requisição inválida (status code 400)
     */
    @Operation(
        operationId = "register",
        summary = "Register endpoint",
        description = "Endpoint para registrar novos usuários.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Registro bem-sucedido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Requisição inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Register400Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<LoginResponseDTO> register(
        @Parameter(name = "RegisterRequestDTO", description = "", required = true) @Valid @RequestBody RegisterRequestDTO registerRequestDTO
    );


    /**
     * POST /auth/revoke : Revoke token
     * Revoke the authorization token.
     *
     * @param revokeTokenRequest  (optional)
     * @return Token revoked successfully. (status code 200)
     *         or Bad request. (status code 400)
     */
    @Operation(
        operationId = "revokeToken",
        summary = "Revoke token",
        description = "Revoke the authorization token.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Token revoked successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RevokeToken200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RevokeToken400Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/revoke",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<RevokeToken200Response> revokeToken(
        @Parameter(name = "RevokeTokenRequest", description = "") @Valid @RequestBody(required = false) RevokeTokenRequest revokeTokenRequest
    );


    /**
     * GET /auth/verify-authorization : Verify authorization endpoint
     * Verifica a autorização do token.
     *
     * @param authorization  (required)
     * @return Token válido (status code 200)
     *         or Token inválido ou ausente (status code 400)
     */
    @Operation(
        operationId = "verifyAuthorization",
        summary = "Verify authorization endpoint",
        description = "Verifica a autorização do token.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Token válido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))
            }),
            @ApiResponse(responseCode = "400", description = "Token inválido ou ausente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/verify-authorization",
        produces = { "application/json" }
    )
    
    ResponseEntity<Boolean> verifyAuthorization(
        @NotNull @Parameter(name = "Authorization", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true) String authorization
    );

}
