/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dasad.empresa.api;

import com.dasad.empresa.model.OrganizacaoModel;
import com.dasad.empresa.model.OrganizacaoRequest;
import com.dasad.empresa.model.OrganizacaoRequestDTO;
import com.dasad.empresa.model.OrganizacaoResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-27T20:37:40.910467600Z[Europe/Lisbon]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Organização", description = "Operações relacionadas a organizações")
public interface OrganizacaoApi {

    /**
     * PUT /organizacao : Cria uma organização
     *
     * @param organizacaoRequestDTO  (optional)
     * @return Sucesso (status code 200)
     */
    @Operation(
        operationId = "createOrganizacao",
        summary = "Cria uma organização",
        tags = { "Organização" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizacaoModel.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/organizacao",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<OrganizacaoModel> createOrganizacao(
        @Parameter(name = "OrganizacaoRequestDTO", description = "") @Valid @RequestBody(required = false) OrganizacaoRequestDTO organizacaoRequestDTO
    );


    /**
     * DELETE /organizacao/delete/{id} : Deleta uma organização
     *
     * @param id  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deleteOrganizacao",
        summary = "Deleta uma organização",
        tags = { "Organização" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/organizacao/delete/{id}"
    )
    
    ResponseEntity<Void> deleteOrganizacao(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /organizacao/detail/{id} : Detalha  uma organização
     *
     * @param id  (required)
     * @return Sucesso (status code 200)
     */
    @Operation(
        operationId = "detailOrganizacao",
        summary = "Detalha  uma organização",
        tags = { "Organização" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizacaoResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/organizacao/detail/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<OrganizacaoResponseDTO> detailOrganizacao(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * POST /organizacao/find : Busca Organizações
     *
     * @param organizacaoRequest  (optional)
     * @return Sucesso (status code 200)
     */
    @Operation(
        operationId = "findOrganizacao",
        summary = "Busca Organizações",
        tags = { "Organização" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizacaoResponseDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/organizacao/find",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<OrganizacaoResponseDTO> findOrganizacao(
        @Parameter(name = "OrganizacaoRequest", description = "") @Valid @RequestBody(required = false) OrganizacaoRequest organizacaoRequest
    );


    /**
     * PATCH /organizacao : Atualiza uma organização
     *
     * @param organizacaoModel  (optional)
     * @return Sucesso (status code 200)
     */
    @Operation(
        operationId = "updateOrganizacao",
        summary = "Atualiza uma organização",
        tags = { "Organização" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizacaoModel.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/organizacao",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<OrganizacaoModel> updateOrganizacao(
        @Parameter(name = "OrganizacaoModel", description = "") @Valid @RequestBody(required = false) OrganizacaoModel organizacaoModel
    );

}
