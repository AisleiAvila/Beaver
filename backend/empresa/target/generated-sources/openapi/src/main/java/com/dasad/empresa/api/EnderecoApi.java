/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dasad.empresa.api;

import com.dasad.empresa.model.Createendereco400Response;
import com.dasad.empresa.model.Createendereco500Response;
import com.dasad.empresa.model.EnderecoModel;
import com.dasad.empresa.model.Updateendereco404Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-27T20:37:40.910467600Z[Europe/Lisbon]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Endereço", description = "Operações relacionadas a endereços")
public interface EnderecoApi {

    /**
     * POST /endereco : Cria um novo endereço
     *
     * @param enderecoModel  (required)
     * @return Endereço criado com sucesso (status code 200)
     *         or Requisição inválida (status code 400)
     *         or Erro interno (status code 500)
     */
    @Operation(
        operationId = "createendereco",
        summary = "Cria um novo endereço",
        tags = { "Endereço" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Endereço criado com sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EnderecoModel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Requisição inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Createendereco400Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erro interno", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Createendereco500Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/endereco",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<EnderecoModel> createendereco(
        @Parameter(name = "EnderecoModel", description = "", required = true) @Valid @RequestBody EnderecoModel enderecoModel
    );


    /**
     * DELETE /endereco/{id} : Deleta um endereço existente
     *
     * @param id  (required)
     * @return Endereço excluído com sucesso (status code 204)
     *         or Endereço não encontrado (status code 404)
     *         or Erro interno do servidor (status code 500)
     */
    @Operation(
        operationId = "deleteendereco",
        summary = "Deleta um endereço existente",
        responses = {
            @ApiResponse(responseCode = "204", description = "Endereço excluído com sucesso"),
            @ApiResponse(responseCode = "404", description = "Endereço não encontrado"),
            @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/endereco/{id}"
    )
    
    ResponseEntity<Void> deleteendereco(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /endereco/{id} : Detalha um endereço
     *
     * @param id  (required)
     * @return Sucesso (status code 200)
     */
    @Operation(
        operationId = "detailendereco",
        summary = "Detalha um endereço",
        tags = { "Endereço" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EnderecoModel.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/endereco/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<EnderecoModel> detailendereco(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /endereco : Busca Enderecos
     *
     * @return Sucesso (status code 200)
     */
    @Operation(
        operationId = "findendereco",
        summary = "Busca Enderecos",
        tags = { "Perfil" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EnderecoModel.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/endereco",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<EnderecoModel>> findendereco(
        
    );


    /**
     * PUT /endereco/{id} : Atualiza um endereço existente
     *
     * @param id  (required)
     * @param enderecoModel  (required)
     * @return Endereço atualizado com sucesso (status code 200)
     *         or Requisição inválida (status code 404)
     *         or Erro interno (status code 500)
     */
    @Operation(
        operationId = "updateendereco",
        summary = "Atualiza um endereço existente",
        responses = {
            @ApiResponse(responseCode = "200", description = "Endereço atualizado com sucesso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EnderecoModel.class))
            }),
            @ApiResponse(responseCode = "404", description = "Requisição inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Updateendereco404Response.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erro interno", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Createendereco500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/endereco/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<EnderecoModel> updateendereco(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "EnderecoModel", description = "", required = true) @Valid @RequestBody EnderecoModel enderecoModel
    );

}
