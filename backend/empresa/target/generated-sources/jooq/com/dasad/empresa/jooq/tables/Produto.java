/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Desconto.DescontoPath;
import com.dasad.empresa.jooq.tables.Estoque.EstoquePath;
import com.dasad.empresa.jooq.tables.HistoricoPreco.HistoricoPrecoPath;
import com.dasad.empresa.jooq.tables.ItemPedido.ItemPedidoPath;
import com.dasad.empresa.jooq.tables.ProdutoFornecedor.ProdutoFornecedorPath;
import com.dasad.empresa.jooq.tables.records.ProdutoRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Produto extends TableImpl<ProdutoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.produto</code>
     */
    public static final Produto PRODUTO = new Produto();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProdutoRecord> getRecordType() {
        return ProdutoRecord.class;
    }

    /**
     * The column <code>public.produto.id</code>.
     */
    public final TableField<ProdutoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.produto.nome</code>.
     */
    public final TableField<ProdutoRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.produto.descricao</code>.
     */
    public final TableField<ProdutoRecord, String> DESCRICAO = createField(DSL.name("descricao"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.produto.preco</code>.
     */
    public final TableField<ProdutoRecord, BigDecimal> PRECO = createField(DSL.name("preco"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.produto.categoria</code>.
     */
    public final TableField<ProdutoRecord, String> CATEGORIA = createField(DSL.name("categoria"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.produto.data_cadastro</code>.
     */
    public final TableField<ProdutoRecord, LocalDateTime> DATA_CADASTRO = createField(DSL.name("data_cadastro"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Produto(Name alias, Table<ProdutoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Produto(Name alias, Table<ProdutoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.produto</code> table reference
     */
    public Produto(String alias) {
        this(DSL.name(alias), PRODUTO);
    }

    /**
     * Create an aliased <code>public.produto</code> table reference
     */
    public Produto(Name alias) {
        this(alias, PRODUTO);
    }

    /**
     * Create a <code>public.produto</code> table reference
     */
    public Produto() {
        this(DSL.name("produto"), null);
    }

    public <O extends Record> Produto(Table<O> path, ForeignKey<O, ProdutoRecord> childPath, InverseForeignKey<O, ProdutoRecord> parentPath) {
        super(path, childPath, parentPath, PRODUTO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProdutoPath extends Produto implements Path<ProdutoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProdutoPath(Table<O> path, ForeignKey<O, ProdutoRecord> childPath, InverseForeignKey<O, ProdutoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProdutoPath(Name alias, Table<ProdutoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProdutoPath as(String alias) {
            return new ProdutoPath(DSL.name(alias), this);
        }

        @Override
        public ProdutoPath as(Name alias) {
            return new ProdutoPath(alias, this);
        }

        @Override
        public ProdutoPath as(Table<?> alias) {
            return new ProdutoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProdutoRecord, Integer> getIdentity() {
        return (Identity<ProdutoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProdutoRecord> getPrimaryKey() {
        return Keys.PRODUTO_PKEY;
    }

    private transient DescontoPath _desconto;

    /**
     * Get the implicit to-many join path to the <code>public.desconto</code>
     * table
     */
    public DescontoPath desconto() {
        if (_desconto == null)
            _desconto = new DescontoPath(this, null, Keys.DESCONTO__DESCONTO_PRODUTO_ID_FKEY.getInverseKey());

        return _desconto;
    }

    private transient EstoquePath _estoque;

    /**
     * Get the implicit to-many join path to the <code>public.estoque</code>
     * table
     */
    public EstoquePath estoque() {
        if (_estoque == null)
            _estoque = new EstoquePath(this, null, Keys.ESTOQUE__ESTOQUE_PRODUTO_ID_FKEY.getInverseKey());

        return _estoque;
    }

    private transient HistoricoPrecoPath _historicoPreco;

    /**
     * Get the implicit to-many join path to the
     * <code>public.historico_preco</code> table
     */
    public HistoricoPrecoPath historicoPreco() {
        if (_historicoPreco == null)
            _historicoPreco = new HistoricoPrecoPath(this, null, Keys.HISTORICO_PRECO__HISTORICO_PRECO_PRODUTO_ID_FKEY.getInverseKey());

        return _historicoPreco;
    }

    private transient ItemPedidoPath _itemPedido;

    /**
     * Get the implicit to-many join path to the <code>public.item_pedido</code>
     * table
     */
    public ItemPedidoPath itemPedido() {
        if (_itemPedido == null)
            _itemPedido = new ItemPedidoPath(this, null, Keys.ITEM_PEDIDO__ITEM_PEDIDO_PRODUTO_ID_FKEY.getInverseKey());

        return _itemPedido;
    }

    private transient ProdutoFornecedorPath _produtoFornecedor;

    /**
     * Get the implicit to-many join path to the
     * <code>public.produto_fornecedor</code> table
     */
    public ProdutoFornecedorPath produtoFornecedor() {
        if (_produtoFornecedor == null)
            _produtoFornecedor = new ProdutoFornecedorPath(this, null, Keys.PRODUTO_FORNECEDOR__PRODUTO_FORNECEDOR_PRODUTO_ID_FKEY.getInverseKey());

        return _produtoFornecedor;
    }

    @Override
    public Produto as(String alias) {
        return new Produto(DSL.name(alias), this);
    }

    @Override
    public Produto as(Name alias) {
        return new Produto(alias, this);
    }

    @Override
    public Produto as(Table<?> alias) {
        return new Produto(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Produto rename(String name) {
        return new Produto(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Produto rename(Name name) {
        return new Produto(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Produto rename(Table<?> name) {
        return new Produto(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Produto where(Condition condition) {
        return new Produto(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Produto where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Produto where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Produto where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Produto where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Produto where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Produto where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Produto where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Produto whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Produto whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
