/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.PrecosRegionais.PrecosRegionaisPath;
import com.dasad.empresa.jooq.tables.Subcategorias.SubcategoriasPath;
import com.dasad.empresa.jooq.tables.records.RegioesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Regiões de atuação dos prestadores de serviço
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Regioes extends TableImpl<RegioesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.regioes</code>
     */
    public static final Regioes REGIOES = new Regioes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegioesRecord> getRecordType() {
        return RegioesRecord.class;
    }

    /**
     * The column <code>public.regioes.id</code>.
     */
    public final TableField<RegioesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.regioes.nome</code>.
     */
    public final TableField<RegioesRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.regioes.cidade</code>.
     */
    public final TableField<RegioesRecord, String> CIDADE = createField(DSL.name("cidade"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.regioes.estado</code>.
     */
    public final TableField<RegioesRecord, String> ESTADO = createField(DSL.name("estado"), SQLDataType.CHAR(2).nullable(false), this, "");

    /**
     * The column <code>public.regioes.ativo</code>.
     */
    public final TableField<RegioesRecord, Boolean> ATIVO = createField(DSL.name("ativo"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.regioes.data_criacao</code>.
     */
    public final TableField<RegioesRecord, LocalDateTime> DATA_CRIACAO = createField(DSL.name("data_criacao"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.regioes.data_atualizacao</code>.
     */
    public final TableField<RegioesRecord, LocalDateTime> DATA_ATUALIZACAO = createField(DSL.name("data_atualizacao"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Regioes(Name alias, Table<RegioesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Regioes(Name alias, Table<RegioesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Regiões de atuação dos prestadores de serviço"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.regioes</code> table reference
     */
    public Regioes(String alias) {
        this(DSL.name(alias), REGIOES);
    }

    /**
     * Create an aliased <code>public.regioes</code> table reference
     */
    public Regioes(Name alias) {
        this(alias, REGIOES);
    }

    /**
     * Create a <code>public.regioes</code> table reference
     */
    public Regioes() {
        this(DSL.name("regioes"), null);
    }

    public <O extends Record> Regioes(Table<O> path, ForeignKey<O, RegioesRecord> childPath, InverseForeignKey<O, RegioesRecord> parentPath) {
        super(path, childPath, parentPath, REGIOES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RegioesPath extends Regioes implements Path<RegioesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RegioesPath(Table<O> path, ForeignKey<O, RegioesRecord> childPath, InverseForeignKey<O, RegioesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RegioesPath(Name alias, Table<RegioesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RegioesPath as(String alias) {
            return new RegioesPath(DSL.name(alias), this);
        }

        @Override
        public RegioesPath as(Name alias) {
            return new RegioesPath(alias, this);
        }

        @Override
        public RegioesPath as(Table<?> alias) {
            return new RegioesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RegioesRecord, Integer> getIdentity() {
        return (Identity<RegioesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RegioesRecord> getPrimaryKey() {
        return Keys.REGIOES_PKEY;
    }

    @Override
    public List<UniqueKey<RegioesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.REGIOES_NOME_CIDADE_ESTADO_KEY);
    }

    private transient PrecosRegionaisPath _precosRegionais;

    /**
     * Get the implicit to-many join path to the
     * <code>public.precos_regionais</code> table
     */
    public PrecosRegionaisPath precosRegionais() {
        if (_precosRegionais == null)
            _precosRegionais = new PrecosRegionaisPath(this, null, Keys.PRECOS_REGIONAIS__PRECOS_REGIONAIS_REGIAO_ID_FKEY.getInverseKey());

        return _precosRegionais;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.subcategorias</code> table
     */
    public SubcategoriasPath subcategorias() {
        return precosRegionais().subcategorias();
    }

    @Override
    public Regioes as(String alias) {
        return new Regioes(DSL.name(alias), this);
    }

    @Override
    public Regioes as(Name alias) {
        return new Regioes(alias, this);
    }

    @Override
    public Regioes as(Table<?> alias) {
        return new Regioes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Regioes rename(String name) {
        return new Regioes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Regioes rename(Name name) {
        return new Regioes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Regioes rename(Table<?> name) {
        return new Regioes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Regioes where(Condition condition) {
        return new Regioes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Regioes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Regioes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Regioes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Regioes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Regioes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Regioes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Regioes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Regioes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Regioes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
