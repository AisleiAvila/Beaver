/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.records.OrganizacaoRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Organizacao extends TableImpl<OrganizacaoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.organizacao</code>
     */
    public static final Organizacao ORGANIZACAO = new Organizacao();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizacaoRecord> getRecordType() {
        return OrganizacaoRecord.class;
    }

    /**
     * The column <code>public.organizacao.id</code>.
     */
    public final TableField<OrganizacaoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.organizacao.nome</code>.
     */
    public final TableField<OrganizacaoRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.organizacao.nif</code>.
     */
    public final TableField<OrganizacaoRecord, String> NIF = createField(DSL.name("nif"), SQLDataType.VARCHAR(9).nullable(false), this, "");

    /**
     * The column <code>public.organizacao.email</code>.
     */
    public final TableField<OrganizacaoRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.organizacao.website</code>.
     */
    public final TableField<OrganizacaoRecord, String> WEBSITE = createField(DSL.name("website"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.organizacao.setor_atividade</code>.
     */
    public final TableField<OrganizacaoRecord, String> SETOR_ATIVIDADE = createField(DSL.name("setor_atividade"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.organizacao.missao</code>.
     */
    public final TableField<OrganizacaoRecord, String> MISSAO = createField(DSL.name("missao"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organizacao.representante_legal</code>.
     */
    public final TableField<OrganizacaoRecord, String> REPRESENTANTE_LEGAL = createField(DSL.name("representante_legal"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.organizacao.cargo</code>.
     */
    public final TableField<OrganizacaoRecord, String> CARGO = createField(DSL.name("cargo"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.organizacao.numero_registo_comercial</code>.
     */
    public final TableField<OrganizacaoRecord, String> NUMERO_REGISTO_COMERCIAL = createField(DSL.name("numero_registo_comercial"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.organizacao.data_registo</code>.
     */
    public final TableField<OrganizacaoRecord, LocalDate> DATA_REGISTO = createField(DSL.name("data_registo"), SQLDataType.LOCALDATE, this, "");

    private Organizacao(Name alias, Table<OrganizacaoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Organizacao(Name alias, Table<OrganizacaoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.organizacao</code> table reference
     */
    public Organizacao(String alias) {
        this(DSL.name(alias), ORGANIZACAO);
    }

    /**
     * Create an aliased <code>public.organizacao</code> table reference
     */
    public Organizacao(Name alias) {
        this(alias, ORGANIZACAO);
    }

    /**
     * Create a <code>public.organizacao</code> table reference
     */
    public Organizacao() {
        this(DSL.name("organizacao"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrganizacaoRecord, Integer> getIdentity() {
        return (Identity<OrganizacaoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrganizacaoRecord> getPrimaryKey() {
        return Keys.ORGANIZACAO_PKEY;
    }

    @Override
    public List<UniqueKey<OrganizacaoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ORGANIZACAO_NIF_KEY);
    }

    @Override
    public Organizacao as(String alias) {
        return new Organizacao(DSL.name(alias), this);
    }

    @Override
    public Organizacao as(Name alias) {
        return new Organizacao(alias, this);
    }

    @Override
    public Organizacao as(Table<?> alias) {
        return new Organizacao(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Organizacao rename(String name) {
        return new Organizacao(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organizacao rename(Name name) {
        return new Organizacao(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organizacao rename(Table<?> name) {
        return new Organizacao(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organizacao where(Condition condition) {
        return new Organizacao(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organizacao where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organizacao where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organizacao where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organizacao where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organizacao where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organizacao where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organizacao where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organizacao whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organizacao whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
