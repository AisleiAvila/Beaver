/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Categorias.CategoriasPath;
import com.dasad.empresa.jooq.tables.records.CategoriaEquipamentosRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Equipamentos necessários para cada categoria de serviço
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CategoriaEquipamentos extends TableImpl<CategoriaEquipamentosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.categoria_equipamentos</code>
     */
    public static final CategoriaEquipamentos CATEGORIA_EQUIPAMENTOS = new CategoriaEquipamentos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoriaEquipamentosRecord> getRecordType() {
        return CategoriaEquipamentosRecord.class;
    }

    /**
     * The column <code>public.categoria_equipamentos.id</code>.
     */
    public final TableField<CategoriaEquipamentosRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.categoria_equipamentos.categoria_id</code>.
     */
    public final TableField<CategoriaEquipamentosRecord, Integer> CATEGORIA_ID = createField(DSL.name("categoria_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.categoria_equipamentos.nome_equipamento</code>.
     */
    public final TableField<CategoriaEquipamentosRecord, String> NOME_EQUIPAMENTO = createField(DSL.name("nome_equipamento"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.categoria_equipamentos.descricao</code>.
     */
    public final TableField<CategoriaEquipamentosRecord, String> DESCRICAO = createField(DSL.name("descricao"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.categoria_equipamentos.obrigatorio</code>.
     */
    public final TableField<CategoriaEquipamentosRecord, Boolean> OBRIGATORIO = createField(DSL.name("obrigatorio"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.categoria_equipamentos.data_criacao</code>.
     */
    public final TableField<CategoriaEquipamentosRecord, LocalDateTime> DATA_CRIACAO = createField(DSL.name("data_criacao"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.categoria_equipamentos.data_atualizacao</code>.
     */
    public final TableField<CategoriaEquipamentosRecord, LocalDateTime> DATA_ATUALIZACAO = createField(DSL.name("data_atualizacao"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private CategoriaEquipamentos(Name alias, Table<CategoriaEquipamentosRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CategoriaEquipamentos(Name alias, Table<CategoriaEquipamentosRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Equipamentos necessários para cada categoria de serviço"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.categoria_equipamentos</code> table
     * reference
     */
    public CategoriaEquipamentos(String alias) {
        this(DSL.name(alias), CATEGORIA_EQUIPAMENTOS);
    }

    /**
     * Create an aliased <code>public.categoria_equipamentos</code> table
     * reference
     */
    public CategoriaEquipamentos(Name alias) {
        this(alias, CATEGORIA_EQUIPAMENTOS);
    }

    /**
     * Create a <code>public.categoria_equipamentos</code> table reference
     */
    public CategoriaEquipamentos() {
        this(DSL.name("categoria_equipamentos"), null);
    }

    public <O extends Record> CategoriaEquipamentos(Table<O> path, ForeignKey<O, CategoriaEquipamentosRecord> childPath, InverseForeignKey<O, CategoriaEquipamentosRecord> parentPath) {
        super(path, childPath, parentPath, CATEGORIA_EQUIPAMENTOS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CategoriaEquipamentosPath extends CategoriaEquipamentos implements Path<CategoriaEquipamentosRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CategoriaEquipamentosPath(Table<O> path, ForeignKey<O, CategoriaEquipamentosRecord> childPath, InverseForeignKey<O, CategoriaEquipamentosRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CategoriaEquipamentosPath(Name alias, Table<CategoriaEquipamentosRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CategoriaEquipamentosPath as(String alias) {
            return new CategoriaEquipamentosPath(DSL.name(alias), this);
        }

        @Override
        public CategoriaEquipamentosPath as(Name alias) {
            return new CategoriaEquipamentosPath(alias, this);
        }

        @Override
        public CategoriaEquipamentosPath as(Table<?> alias) {
            return new CategoriaEquipamentosPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CategoriaEquipamentosRecord, Integer> getIdentity() {
        return (Identity<CategoriaEquipamentosRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CategoriaEquipamentosRecord> getPrimaryKey() {
        return Keys.CATEGORIA_EQUIPAMENTOS_PKEY;
    }

    @Override
    public List<UniqueKey<CategoriaEquipamentosRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_EQUIPAMENTO_CATEGORIA);
    }

    @Override
    public List<ForeignKey<CategoriaEquipamentosRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CATEGORIA_EQUIPAMENTOS__CATEGORIA_EQUIPAMENTOS_CATEGORIA_ID_FKEY);
    }

    private transient CategoriasPath _categorias;

    /**
     * Get the implicit join path to the <code>public.categorias</code> table.
     */
    public CategoriasPath categorias() {
        if (_categorias == null)
            _categorias = new CategoriasPath(this, Keys.CATEGORIA_EQUIPAMENTOS__CATEGORIA_EQUIPAMENTOS_CATEGORIA_ID_FKEY, null);

        return _categorias;
    }

    @Override
    public CategoriaEquipamentos as(String alias) {
        return new CategoriaEquipamentos(DSL.name(alias), this);
    }

    @Override
    public CategoriaEquipamentos as(Name alias) {
        return new CategoriaEquipamentos(alias, this);
    }

    @Override
    public CategoriaEquipamentos as(Table<?> alias) {
        return new CategoriaEquipamentos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoriaEquipamentos rename(String name) {
        return new CategoriaEquipamentos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoriaEquipamentos rename(Name name) {
        return new CategoriaEquipamentos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoriaEquipamentos rename(Table<?> name) {
        return new CategoriaEquipamentos(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoriaEquipamentos where(Condition condition) {
        return new CategoriaEquipamentos(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoriaEquipamentos where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoriaEquipamentos where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoriaEquipamentos where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoriaEquipamentos where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoriaEquipamentos where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoriaEquipamentos where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategoriaEquipamentos where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoriaEquipamentos whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategoriaEquipamentos whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
