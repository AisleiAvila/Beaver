/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Indexes;
import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.CategoriaEquipamentos.CategoriaEquipamentosPath;
import com.dasad.empresa.jooq.tables.Subcategorias.SubcategoriasPath;
import com.dasad.empresa.jooq.tables.records.CategoriasRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Tabela principal de categorias de serviços
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Categorias extends TableImpl<CategoriasRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.categorias</code>
     */
    public static final Categorias CATEGORIAS = new Categorias();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoriasRecord> getRecordType() {
        return CategoriasRecord.class;
    }

    /**
     * The column <code>public.categorias.id</code>.
     */
    public final TableField<CategoriasRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.categorias.nome</code>.
     */
    public final TableField<CategoriasRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.categorias.descricao</code>.
     */
    public final TableField<CategoriasRecord, String> DESCRICAO = createField(DSL.name("descricao"), SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<CategoriasRecord, Object> STATUS = createField(DSL.name("status"), DefaultDataType.getDefaultDataType("\"public\".\"status_servico\"").nullable(false).defaultValue(DSL.field(DSL.raw("'ATIVO'::status_servico"), org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>public.categorias.requer_certificacao</code>.
     */
    public final TableField<CategoriasRecord, Boolean> REQUER_CERTIFICACAO = createField(DSL.name("requer_certificacao"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.categorias.tipo_certificacao</code>.
     */
    public final TableField<CategoriasRecord, String> TIPO_CERTIFICACAO = createField(DSL.name("tipo_certificacao"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.categorias.experiencia_minima_meses</code>.
     */
    public final TableField<CategoriasRecord, Integer> EXPERIENCIA_MINIMA_MESES = createField(DSL.name("experiencia_minima_meses"), SQLDataType.INTEGER, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<CategoriasRecord, Object> NIVEL_RISCO = createField(DSL.name("nivel_risco"), DefaultDataType.getDefaultDataType("\"public\".\"nivel_risco\"").nullable(false).defaultValue(DSL.field(DSL.raw("'BAIXO'::nivel_risco"), org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>public.categorias.seguro_obrigatorio</code>.
     */
    public final TableField<CategoriasRecord, Boolean> SEGURO_OBRIGATORIO = createField(DSL.name("seguro_obrigatorio"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.categorias.valor_base_hora</code>.
     */
    public final TableField<CategoriasRecord, BigDecimal> VALOR_BASE_HORA = createField(DSL.name("valor_base_hora"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.categorias.data_criacao</code>.
     */
    public final TableField<CategoriasRecord, LocalDateTime> DATA_CRIACAO = createField(DSL.name("data_criacao"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.categorias.data_atualizacao</code>.
     */
    public final TableField<CategoriasRecord, LocalDateTime> DATA_ATUALIZACAO = createField(DSL.name("data_atualizacao"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.categorias.url_imagem</code>.
     */
    public final TableField<CategoriasRecord, String> URL_IMAGEM = createField(DSL.name("url_imagem"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.categorias.palavras_chave</code>.
     */
    public final TableField<CategoriasRecord, String[]> PALAVRAS_CHAVE = createField(DSL.name("palavras_chave"), SQLDataType.CLOB.array().defaultValue(DSL.field(DSL.raw("'{}'::text[]"), SQLDataType.CLOB.array())), this, "");

    /**
     * The column <code>public.categorias.horas_minimas_agendamento</code>.
     */
    public final TableField<CategoriasRecord, Integer> HORAS_MINIMAS_AGENDAMENTO = createField(DSL.name("horas_minimas_agendamento"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("24"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.categorias.horas_cancelamento_gratis</code>.
     */
    public final TableField<CategoriasRecord, Integer> HORAS_CANCELAMENTO_GRATIS = createField(DSL.name("horas_cancelamento_gratis"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("24"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.categorias.percentual_comissao</code>.
     */
    public final TableField<CategoriasRecord, BigDecimal> PERCENTUAL_COMISSAO = createField(DSL.name("percentual_comissao"), SQLDataType.NUMERIC(5, 2).nullable(false), this, "");

    /**
     * The column <code>public.categorias.documentos_necessarios</code>.
     */
    public final TableField<CategoriasRecord, String[]> DOCUMENTOS_NECESSARIOS = createField(DSL.name("documentos_necessarios"), SQLDataType.CLOB.array().defaultValue(DSL.field(DSL.raw("'{}'::text[]"), SQLDataType.CLOB.array())), this, "");

    private Categorias(Name alias, Table<CategoriasRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Categorias(Name alias, Table<CategoriasRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Tabela principal de categorias de serviços"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.categorias</code> table reference
     */
    public Categorias(String alias) {
        this(DSL.name(alias), CATEGORIAS);
    }

    /**
     * Create an aliased <code>public.categorias</code> table reference
     */
    public Categorias(Name alias) {
        this(alias, CATEGORIAS);
    }

    /**
     * Create a <code>public.categorias</code> table reference
     */
    public Categorias() {
        this(DSL.name("categorias"), null);
    }

    public <O extends Record> Categorias(Table<O> path, ForeignKey<O, CategoriasRecord> childPath, InverseForeignKey<O, CategoriasRecord> parentPath) {
        super(path, childPath, parentPath, CATEGORIAS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CategoriasPath extends Categorias implements Path<CategoriasRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CategoriasPath(Table<O> path, ForeignKey<O, CategoriasRecord> childPath, InverseForeignKey<O, CategoriasRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CategoriasPath(Name alias, Table<CategoriasRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CategoriasPath as(String alias) {
            return new CategoriasPath(DSL.name(alias), this);
        }

        @Override
        public CategoriasPath as(Name alias) {
            return new CategoriasPath(alias, this);
        }

        @Override
        public CategoriasPath as(Table<?> alias) {
            return new CategoriasPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CATEGORIAS_STATUS);
    }

    @Override
    public Identity<CategoriasRecord, Integer> getIdentity() {
        return (Identity<CategoriasRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CategoriasRecord> getPrimaryKey() {
        return Keys.CATEGORIAS_PKEY;
    }

    @Override
    public List<UniqueKey<CategoriasRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_CATEGORIA_NOME);
    }

    private transient CategoriaEquipamentosPath _categoriaEquipamentos;

    /**
     * Get the implicit to-many join path to the
     * <code>public.categoria_equipamentos</code> table
     */
    public CategoriaEquipamentosPath categoriaEquipamentos() {
        if (_categoriaEquipamentos == null)
            _categoriaEquipamentos = new CategoriaEquipamentosPath(this, null, Keys.CATEGORIA_EQUIPAMENTOS__CATEGORIA_EQUIPAMENTOS_CATEGORIA_ID_FKEY.getInverseKey());

        return _categoriaEquipamentos;
    }

    private transient SubcategoriasPath _subcategorias;

    /**
     * Get the implicit to-many join path to the
     * <code>public.subcategorias</code> table
     */
    public SubcategoriasPath subcategorias() {
        if (_subcategorias == null)
            _subcategorias = new SubcategoriasPath(this, null, Keys.SUBCATEGORIAS__SUBCATEGORIAS_CATEGORIA_ID_FKEY.getInverseKey());

        return _subcategorias;
    }

    @Override
    public List<Check<CategoriasRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("categorias_experiencia_minima_meses_check"), "((experiencia_minima_meses >= 0))", true),
            Internal.createCheck(this, DSL.name("categorias_horas_cancelamento_gratis_check"), "((horas_cancelamento_gratis >= 0))", true),
            Internal.createCheck(this, DSL.name("categorias_horas_minimas_agendamento_check"), "((horas_minimas_agendamento > 0))", true),
            Internal.createCheck(this, DSL.name("categorias_percentual_comissao_check"), "(((percentual_comissao >= (0)::numeric) AND (percentual_comissao <= (100)::numeric)))", true),
            Internal.createCheck(this, DSL.name("categorias_valor_base_hora_check"), "((valor_base_hora >= (0)::numeric))", true)
        );
    }

    @Override
    public Categorias as(String alias) {
        return new Categorias(DSL.name(alias), this);
    }

    @Override
    public Categorias as(Name alias) {
        return new Categorias(alias, this);
    }

    @Override
    public Categorias as(Table<?> alias) {
        return new Categorias(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Categorias rename(String name) {
        return new Categorias(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Categorias rename(Name name) {
        return new Categorias(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Categorias rename(Table<?> name) {
        return new Categorias(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categorias where(Condition condition) {
        return new Categorias(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categorias where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categorias where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categorias where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Categorias where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Categorias where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Categorias where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Categorias where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categorias whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categorias whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
