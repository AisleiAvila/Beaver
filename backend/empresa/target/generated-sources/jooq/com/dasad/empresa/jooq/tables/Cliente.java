/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Pedido.PedidoPath;
import com.dasad.empresa.jooq.tables.records.ClienteRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cliente extends TableImpl<ClienteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cliente</code>
     */
    public static final Cliente CLIENTE = new Cliente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClienteRecord> getRecordType() {
        return ClienteRecord.class;
    }

    /**
     * The column <code>public.cliente.id</code>.
     */
    public final TableField<ClienteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.cliente.nome</code>.
     */
    public final TableField<ClienteRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.cliente.email</code>.
     */
    public final TableField<ClienteRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.cliente.telefone</code>.
     */
    public final TableField<ClienteRecord, String> TELEFONE = createField(DSL.name("telefone"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>public.cliente.endereco</code>.
     */
    public final TableField<ClienteRecord, String> ENDERECO = createField(DSL.name("endereco"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.cliente.foto_perfil</code>.
     */
    public final TableField<ClienteRecord, byte[]> FOTO_PERFIL = createField(DSL.name("foto_perfil"), SQLDataType.BLOB, this, "");

    private Cliente(Name alias, Table<ClienteRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cliente(Name alias, Table<ClienteRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.cliente</code> table reference
     */
    public Cliente(String alias) {
        this(DSL.name(alias), CLIENTE);
    }

    /**
     * Create an aliased <code>public.cliente</code> table reference
     */
    public Cliente(Name alias) {
        this(alias, CLIENTE);
    }

    /**
     * Create a <code>public.cliente</code> table reference
     */
    public Cliente() {
        this(DSL.name("cliente"), null);
    }

    public <O extends Record> Cliente(Table<O> path, ForeignKey<O, ClienteRecord> childPath, InverseForeignKey<O, ClienteRecord> parentPath) {
        super(path, childPath, parentPath, CLIENTE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ClientePath extends Cliente implements Path<ClienteRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ClientePath(Table<O> path, ForeignKey<O, ClienteRecord> childPath, InverseForeignKey<O, ClienteRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ClientePath(Name alias, Table<ClienteRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ClientePath as(String alias) {
            return new ClientePath(DSL.name(alias), this);
        }

        @Override
        public ClientePath as(Name alias) {
            return new ClientePath(alias, this);
        }

        @Override
        public ClientePath as(Table<?> alias) {
            return new ClientePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ClienteRecord, Integer> getIdentity() {
        return (Identity<ClienteRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClienteRecord> getPrimaryKey() {
        return Keys.CLIENTE_PKEY;
    }

    @Override
    public List<UniqueKey<ClienteRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CLIENTE_EMAIL_KEY);
    }

    private transient PedidoPath _pedido;

    /**
     * Get the implicit to-many join path to the <code>public.pedido</code>
     * table
     */
    public PedidoPath pedido() {
        if (_pedido == null)
            _pedido = new PedidoPath(this, null, Keys.PEDIDO__PEDIDO_CLIENTE_ID_FKEY.getInverseKey());

        return _pedido;
    }

    @Override
    public Cliente as(String alias) {
        return new Cliente(DSL.name(alias), this);
    }

    @Override
    public Cliente as(Name alias) {
        return new Cliente(alias, this);
    }

    @Override
    public Cliente as(Table<?> alias) {
        return new Cliente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(String name) {
        return new Cliente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(Name name) {
        return new Cliente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cliente rename(Table<?> name) {
        return new Cliente(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente where(Condition condition) {
        return new Cliente(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cliente where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cliente where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cliente where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cliente where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cliente whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
