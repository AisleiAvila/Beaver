/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Cliente.ClientePath;
import com.dasad.empresa.jooq.tables.ItemPedido.ItemPedidoPath;
import com.dasad.empresa.jooq.tables.records.PedidoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Pedido extends TableImpl<PedidoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pedido</code>
     */
    public static final Pedido PEDIDO = new Pedido();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PedidoRecord> getRecordType() {
        return PedidoRecord.class;
    }

    /**
     * The column <code>public.pedido.id</code>.
     */
    public final TableField<PedidoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pedido.cliente_id</code>.
     */
    public final TableField<PedidoRecord, Integer> CLIENTE_ID = createField(DSL.name("cliente_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pedido.data_pedido</code>.
     */
    public final TableField<PedidoRecord, LocalDateTime> DATA_PEDIDO = createField(DSL.name("data_pedido"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.pedido.status</code>.
     */
    public final TableField<PedidoRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("'Pendente'::character varying"), SQLDataType.VARCHAR)), this, "");

    private Pedido(Name alias, Table<PedidoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Pedido(Name alias, Table<PedidoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.pedido</code> table reference
     */
    public Pedido(String alias) {
        this(DSL.name(alias), PEDIDO);
    }

    /**
     * Create an aliased <code>public.pedido</code> table reference
     */
    public Pedido(Name alias) {
        this(alias, PEDIDO);
    }

    /**
     * Create a <code>public.pedido</code> table reference
     */
    public Pedido() {
        this(DSL.name("pedido"), null);
    }

    public <O extends Record> Pedido(Table<O> path, ForeignKey<O, PedidoRecord> childPath, InverseForeignKey<O, PedidoRecord> parentPath) {
        super(path, childPath, parentPath, PEDIDO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PedidoPath extends Pedido implements Path<PedidoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PedidoPath(Table<O> path, ForeignKey<O, PedidoRecord> childPath, InverseForeignKey<O, PedidoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PedidoPath(Name alias, Table<PedidoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PedidoPath as(String alias) {
            return new PedidoPath(DSL.name(alias), this);
        }

        @Override
        public PedidoPath as(Name alias) {
            return new PedidoPath(alias, this);
        }

        @Override
        public PedidoPath as(Table<?> alias) {
            return new PedidoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PedidoRecord, Integer> getIdentity() {
        return (Identity<PedidoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PedidoRecord> getPrimaryKey() {
        return Keys.PEDIDO_PKEY;
    }

    @Override
    public List<ForeignKey<PedidoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PEDIDO__PEDIDO_CLIENTE_ID_FKEY);
    }

    private transient ClientePath _cliente;

    /**
     * Get the implicit join path to the <code>public.cliente</code> table.
     */
    public ClientePath cliente() {
        if (_cliente == null)
            _cliente = new ClientePath(this, Keys.PEDIDO__PEDIDO_CLIENTE_ID_FKEY, null);

        return _cliente;
    }

    private transient ItemPedidoPath _itemPedido;

    /**
     * Get the implicit to-many join path to the <code>public.item_pedido</code>
     * table
     */
    public ItemPedidoPath itemPedido() {
        if (_itemPedido == null)
            _itemPedido = new ItemPedidoPath(this, null, Keys.ITEM_PEDIDO__ITEM_PEDIDO_PEDIDO_ID_FKEY.getInverseKey());

        return _itemPedido;
    }

    @Override
    public Pedido as(String alias) {
        return new Pedido(DSL.name(alias), this);
    }

    @Override
    public Pedido as(Name alias) {
        return new Pedido(alias, this);
    }

    @Override
    public Pedido as(Table<?> alias) {
        return new Pedido(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pedido rename(String name) {
        return new Pedido(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pedido rename(Name name) {
        return new Pedido(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pedido rename(Table<?> name) {
        return new Pedido(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedido where(Condition condition) {
        return new Pedido(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedido where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedido where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedido where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pedido where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pedido where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pedido where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pedido where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedido whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pedido whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
