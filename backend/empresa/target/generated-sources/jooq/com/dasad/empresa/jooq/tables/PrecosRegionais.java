/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Indexes;
import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Regioes.RegioesPath;
import com.dasad.empresa.jooq.tables.Subcategorias.SubcategoriasPath;
import com.dasad.empresa.jooq.tables.records.PrecosRegionaisRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Preços diferenciados por região para cada subcategoria
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PrecosRegionais extends TableImpl<PrecosRegionaisRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.precos_regionais</code>
     */
    public static final PrecosRegionais PRECOS_REGIONAIS = new PrecosRegionais();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PrecosRegionaisRecord> getRecordType() {
        return PrecosRegionaisRecord.class;
    }

    /**
     * The column <code>public.precos_regionais.id</code>.
     */
    public final TableField<PrecosRegionaisRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.precos_regionais.subcategoria_id</code>.
     */
    public final TableField<PrecosRegionaisRecord, Integer> SUBCATEGORIA_ID = createField(DSL.name("subcategoria_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.precos_regionais.regiao_id</code>.
     */
    public final TableField<PrecosRegionaisRecord, Integer> REGIAO_ID = createField(DSL.name("regiao_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.precos_regionais.preco_base</code>.
     */
    public final TableField<PrecosRegionaisRecord, BigDecimal> PRECO_BASE = createField(DSL.name("preco_base"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.precos_regionais.preco_minimo</code>.
     */
    public final TableField<PrecosRegionaisRecord, BigDecimal> PRECO_MINIMO = createField(DSL.name("preco_minimo"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.precos_regionais.preco_maximo</code>.
     */
    public final TableField<PrecosRegionaisRecord, BigDecimal> PRECO_MAXIMO = createField(DSL.name("preco_maximo"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.precos_regionais.data_criacao</code>.
     */
    public final TableField<PrecosRegionaisRecord, LocalDateTime> DATA_CRIACAO = createField(DSL.name("data_criacao"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.precos_regionais.data_atualizacao</code>.
     */
    public final TableField<PrecosRegionaisRecord, LocalDateTime> DATA_ATUALIZACAO = createField(DSL.name("data_atualizacao"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private PrecosRegionais(Name alias, Table<PrecosRegionaisRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PrecosRegionais(Name alias, Table<PrecosRegionaisRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Preços diferenciados por região para cada subcategoria"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.precos_regionais</code> table reference
     */
    public PrecosRegionais(String alias) {
        this(DSL.name(alias), PRECOS_REGIONAIS);
    }

    /**
     * Create an aliased <code>public.precos_regionais</code> table reference
     */
    public PrecosRegionais(Name alias) {
        this(alias, PRECOS_REGIONAIS);
    }

    /**
     * Create a <code>public.precos_regionais</code> table reference
     */
    public PrecosRegionais() {
        this(DSL.name("precos_regionais"), null);
    }

    public <O extends Record> PrecosRegionais(Table<O> path, ForeignKey<O, PrecosRegionaisRecord> childPath, InverseForeignKey<O, PrecosRegionaisRecord> parentPath) {
        super(path, childPath, parentPath, PRECOS_REGIONAIS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PrecosRegionaisPath extends PrecosRegionais implements Path<PrecosRegionaisRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PrecosRegionaisPath(Table<O> path, ForeignKey<O, PrecosRegionaisRecord> childPath, InverseForeignKey<O, PrecosRegionaisRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PrecosRegionaisPath(Name alias, Table<PrecosRegionaisRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PrecosRegionaisPath as(String alias) {
            return new PrecosRegionaisPath(DSL.name(alias), this);
        }

        @Override
        public PrecosRegionaisPath as(Name alias) {
            return new PrecosRegionaisPath(alias, this);
        }

        @Override
        public PrecosRegionaisPath as(Table<?> alias) {
            return new PrecosRegionaisPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PRECOS_REGIAO, Indexes.IDX_PRECOS_SUBCATEGORIA);
    }

    @Override
    public Identity<PrecosRegionaisRecord, Integer> getIdentity() {
        return (Identity<PrecosRegionaisRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PrecosRegionaisRecord> getPrimaryKey() {
        return Keys.PRECOS_REGIONAIS_PKEY;
    }

    @Override
    public List<UniqueKey<PrecosRegionaisRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_PRECO_REGIONAL);
    }

    @Override
    public List<ForeignKey<PrecosRegionaisRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRECOS_REGIONAIS__PRECOS_REGIONAIS_REGIAO_ID_FKEY, Keys.PRECOS_REGIONAIS__PRECOS_REGIONAIS_SUBCATEGORIA_ID_FKEY);
    }

    private transient RegioesPath _regioes;

    /**
     * Get the implicit join path to the <code>public.regioes</code> table.
     */
    public RegioesPath regioes() {
        if (_regioes == null)
            _regioes = new RegioesPath(this, Keys.PRECOS_REGIONAIS__PRECOS_REGIONAIS_REGIAO_ID_FKEY, null);

        return _regioes;
    }

    private transient SubcategoriasPath _subcategorias;

    /**
     * Get the implicit join path to the <code>public.subcategorias</code>
     * table.
     */
    public SubcategoriasPath subcategorias() {
        if (_subcategorias == null)
            _subcategorias = new SubcategoriasPath(this, Keys.PRECOS_REGIONAIS__PRECOS_REGIONAIS_SUBCATEGORIA_ID_FKEY, null);

        return _subcategorias;
    }

    @Override
    public List<Check<PrecosRegionaisRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("precos_regionais_check"), "((preco_maximo >= preco_minimo))", true),
            Internal.createCheck(this, DSL.name("precos_regionais_preco_base_check"), "((preco_base >= (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("precos_regionais_preco_minimo_check"), "((preco_minimo >= (0)::numeric))", true)
        );
    }

    @Override
    public PrecosRegionais as(String alias) {
        return new PrecosRegionais(DSL.name(alias), this);
    }

    @Override
    public PrecosRegionais as(Name alias) {
        return new PrecosRegionais(alias, this);
    }

    @Override
    public PrecosRegionais as(Table<?> alias) {
        return new PrecosRegionais(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PrecosRegionais rename(String name) {
        return new PrecosRegionais(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PrecosRegionais rename(Name name) {
        return new PrecosRegionais(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PrecosRegionais rename(Table<?> name) {
        return new PrecosRegionais(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PrecosRegionais where(Condition condition) {
        return new PrecosRegionais(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PrecosRegionais where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PrecosRegionais where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PrecosRegionais where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PrecosRegionais where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PrecosRegionais where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PrecosRegionais where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PrecosRegionais where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PrecosRegionais whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PrecosRegionais whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
