/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Usuario.UsuarioPath;
import com.dasad.empresa.jooq.tables.UsuarioPerfil.UsuarioPerfilPath;
import com.dasad.empresa.jooq.tables.records.PerfilRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Perfil extends TableImpl<PerfilRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.perfil</code>
     */
    public static final Perfil PERFIL = new Perfil();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PerfilRecord> getRecordType() {
        return PerfilRecord.class;
    }

    /**
     * The column <code>public.perfil.id</code>.
     */
    public final TableField<PerfilRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.perfil.nome</code>.
     */
    public final TableField<PerfilRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private Perfil(Name alias, Table<PerfilRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Perfil(Name alias, Table<PerfilRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.perfil</code> table reference
     */
    public Perfil(String alias) {
        this(DSL.name(alias), PERFIL);
    }

    /**
     * Create an aliased <code>public.perfil</code> table reference
     */
    public Perfil(Name alias) {
        this(alias, PERFIL);
    }

    /**
     * Create a <code>public.perfil</code> table reference
     */
    public Perfil() {
        this(DSL.name("perfil"), null);
    }

    public <O extends Record> Perfil(Table<O> path, ForeignKey<O, PerfilRecord> childPath, InverseForeignKey<O, PerfilRecord> parentPath) {
        super(path, childPath, parentPath, PERFIL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PerfilPath extends Perfil implements Path<PerfilRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PerfilPath(Table<O> path, ForeignKey<O, PerfilRecord> childPath, InverseForeignKey<O, PerfilRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PerfilPath(Name alias, Table<PerfilRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PerfilPath as(String alias) {
            return new PerfilPath(DSL.name(alias), this);
        }

        @Override
        public PerfilPath as(Name alias) {
            return new PerfilPath(alias, this);
        }

        @Override
        public PerfilPath as(Table<?> alias) {
            return new PerfilPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PerfilRecord, Integer> getIdentity() {
        return (Identity<PerfilRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PerfilRecord> getPrimaryKey() {
        return Keys.PERFIS_PKEY;
    }

    private transient UsuarioPerfilPath _usuarioPerfil;

    /**
     * Get the implicit to-many join path to the
     * <code>public.usuario_perfil</code> table
     */
    public UsuarioPerfilPath usuarioPerfil() {
        if (_usuarioPerfil == null)
            _usuarioPerfil = new UsuarioPerfilPath(this, null, Keys.USUARIO_PERFIL__USUARIOS_PERFIS_PERFIL_ID_FKEY.getInverseKey());

        return _usuarioPerfil;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.usuario</code> table
     */
    public UsuarioPath usuario() {
        return usuarioPerfil().usuario();
    }

    @Override
    public Perfil as(String alias) {
        return new Perfil(DSL.name(alias), this);
    }

    @Override
    public Perfil as(Name alias) {
        return new Perfil(alias, this);
    }

    @Override
    public Perfil as(Table<?> alias) {
        return new Perfil(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Perfil rename(String name) {
        return new Perfil(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Perfil rename(Name name) {
        return new Perfil(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Perfil rename(Table<?> name) {
        return new Perfil(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfil where(Condition condition) {
        return new Perfil(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfil where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfil where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfil where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Perfil where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Perfil where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Perfil where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Perfil where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfil whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Perfil whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
