/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Cidade.CidadePath;
import com.dasad.empresa.jooq.tables.Pais.PaisPath;
import com.dasad.empresa.jooq.tables.records.EstadoRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Estado extends TableImpl<EstadoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.estado</code>
     */
    public static final Estado ESTADO = new Estado();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EstadoRecord> getRecordType() {
        return EstadoRecord.class;
    }

    /**
     * The column <code>public.estado.id</code>.
     */
    public final TableField<EstadoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.estado.nome</code>.
     */
    public final TableField<EstadoRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.estado.pais_id</code>.
     */
    public final TableField<EstadoRecord, Integer> PAIS_ID = createField(DSL.name("pais_id"), SQLDataType.INTEGER, this, "");

    private Estado(Name alias, Table<EstadoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Estado(Name alias, Table<EstadoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.estado</code> table reference
     */
    public Estado(String alias) {
        this(DSL.name(alias), ESTADO);
    }

    /**
     * Create an aliased <code>public.estado</code> table reference
     */
    public Estado(Name alias) {
        this(alias, ESTADO);
    }

    /**
     * Create a <code>public.estado</code> table reference
     */
    public Estado() {
        this(DSL.name("estado"), null);
    }

    public <O extends Record> Estado(Table<O> path, ForeignKey<O, EstadoRecord> childPath, InverseForeignKey<O, EstadoRecord> parentPath) {
        super(path, childPath, parentPath, ESTADO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EstadoPath extends Estado implements Path<EstadoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EstadoPath(Table<O> path, ForeignKey<O, EstadoRecord> childPath, InverseForeignKey<O, EstadoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EstadoPath(Name alias, Table<EstadoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EstadoPath as(String alias) {
            return new EstadoPath(DSL.name(alias), this);
        }

        @Override
        public EstadoPath as(Name alias) {
            return new EstadoPath(alias, this);
        }

        @Override
        public EstadoPath as(Table<?> alias) {
            return new EstadoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EstadoRecord, Integer> getIdentity() {
        return (Identity<EstadoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EstadoRecord> getPrimaryKey() {
        return Keys.ESTADO_PKEY;
    }

    @Override
    public List<ForeignKey<EstadoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ESTADO__ESTADO_PAIS_ID_FKEY);
    }

    private transient PaisPath _pais;

    /**
     * Get the implicit join path to the <code>public.pais</code> table.
     */
    public PaisPath pais() {
        if (_pais == null)
            _pais = new PaisPath(this, Keys.ESTADO__ESTADO_PAIS_ID_FKEY, null);

        return _pais;
    }

    private transient CidadePath _cidade;

    /**
     * Get the implicit to-many join path to the <code>public.cidade</code>
     * table
     */
    public CidadePath cidade() {
        if (_cidade == null)
            _cidade = new CidadePath(this, null, Keys.CIDADE__CIDADE_NOVA_ESTADO_ID_FKEY.getInverseKey());

        return _cidade;
    }

    @Override
    public Estado as(String alias) {
        return new Estado(DSL.name(alias), this);
    }

    @Override
    public Estado as(Name alias) {
        return new Estado(alias, this);
    }

    @Override
    public Estado as(Table<?> alias) {
        return new Estado(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Estado rename(String name) {
        return new Estado(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Estado rename(Name name) {
        return new Estado(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Estado rename(Table<?> name) {
        return new Estado(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estado where(Condition condition) {
        return new Estado(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estado where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estado where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estado where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Estado where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Estado where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Estado where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Estado where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estado whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estado whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
