/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Produto.ProdutoPath;
import com.dasad.empresa.jooq.tables.records.EstoqueRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Estoque extends TableImpl<EstoqueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.estoque</code>
     */
    public static final Estoque ESTOQUE = new Estoque();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EstoqueRecord> getRecordType() {
        return EstoqueRecord.class;
    }

    /**
     * The column <code>public.estoque.id</code>.
     */
    public final TableField<EstoqueRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.estoque.produto_id</code>.
     */
    public final TableField<EstoqueRecord, Integer> PRODUTO_ID = createField(DSL.name("produto_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.estoque.quantidade</code>.
     */
    public final TableField<EstoqueRecord, Integer> QUANTIDADE = createField(DSL.name("quantidade"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.estoque.localizacao</code>.
     */
    public final TableField<EstoqueRecord, String> LOCALIZACAO = createField(DSL.name("localizacao"), SQLDataType.VARCHAR(50), this, "");

    private Estoque(Name alias, Table<EstoqueRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Estoque(Name alias, Table<EstoqueRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.estoque</code> table reference
     */
    public Estoque(String alias) {
        this(DSL.name(alias), ESTOQUE);
    }

    /**
     * Create an aliased <code>public.estoque</code> table reference
     */
    public Estoque(Name alias) {
        this(alias, ESTOQUE);
    }

    /**
     * Create a <code>public.estoque</code> table reference
     */
    public Estoque() {
        this(DSL.name("estoque"), null);
    }

    public <O extends Record> Estoque(Table<O> path, ForeignKey<O, EstoqueRecord> childPath, InverseForeignKey<O, EstoqueRecord> parentPath) {
        super(path, childPath, parentPath, ESTOQUE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EstoquePath extends Estoque implements Path<EstoqueRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EstoquePath(Table<O> path, ForeignKey<O, EstoqueRecord> childPath, InverseForeignKey<O, EstoqueRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EstoquePath(Name alias, Table<EstoqueRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EstoquePath as(String alias) {
            return new EstoquePath(DSL.name(alias), this);
        }

        @Override
        public EstoquePath as(Name alias) {
            return new EstoquePath(alias, this);
        }

        @Override
        public EstoquePath as(Table<?> alias) {
            return new EstoquePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EstoqueRecord, Integer> getIdentity() {
        return (Identity<EstoqueRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EstoqueRecord> getPrimaryKey() {
        return Keys.ESTOQUE_PKEY;
    }

    @Override
    public List<ForeignKey<EstoqueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ESTOQUE__ESTOQUE_PRODUTO_ID_FKEY);
    }

    private transient ProdutoPath _produto;

    /**
     * Get the implicit join path to the <code>public.produto</code> table.
     */
    public ProdutoPath produto() {
        if (_produto == null)
            _produto = new ProdutoPath(this, Keys.ESTOQUE__ESTOQUE_PRODUTO_ID_FKEY, null);

        return _produto;
    }

    @Override
    public List<Check<EstoqueRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("estoque_quantidade_check"), "((quantidade >= 0))", true)
        );
    }

    @Override
    public Estoque as(String alias) {
        return new Estoque(DSL.name(alias), this);
    }

    @Override
    public Estoque as(Name alias) {
        return new Estoque(alias, this);
    }

    @Override
    public Estoque as(Table<?> alias) {
        return new Estoque(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Estoque rename(String name) {
        return new Estoque(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Estoque rename(Name name) {
        return new Estoque(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Estoque rename(Table<?> name) {
        return new Estoque(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estoque where(Condition condition) {
        return new Estoque(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estoque where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estoque where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estoque where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Estoque where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Estoque where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Estoque where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Estoque where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estoque whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Estoque whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
