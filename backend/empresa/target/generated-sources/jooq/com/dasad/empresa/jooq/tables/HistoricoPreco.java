/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Produto.ProdutoPath;
import com.dasad.empresa.jooq.tables.records.HistoricoPrecoRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HistoricoPreco extends TableImpl<HistoricoPrecoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.historico_preco</code>
     */
    public static final HistoricoPreco HISTORICO_PRECO = new HistoricoPreco();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HistoricoPrecoRecord> getRecordType() {
        return HistoricoPrecoRecord.class;
    }

    /**
     * The column <code>public.historico_preco.id</code>.
     */
    public final TableField<HistoricoPrecoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.historico_preco.produto_id</code>.
     */
    public final TableField<HistoricoPrecoRecord, Integer> PRODUTO_ID = createField(DSL.name("produto_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.historico_preco.preco_antigo</code>.
     */
    public final TableField<HistoricoPrecoRecord, BigDecimal> PRECO_ANTIGO = createField(DSL.name("preco_antigo"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.historico_preco.preco_novo</code>.
     */
    public final TableField<HistoricoPrecoRecord, BigDecimal> PRECO_NOVO = createField(DSL.name("preco_novo"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>public.historico_preco.data_mudanca</code>.
     */
    public final TableField<HistoricoPrecoRecord, LocalDate> DATA_MUDANCA = createField(DSL.name("data_mudanca"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.historico_preco.motivo</code>.
     */
    public final TableField<HistoricoPrecoRecord, String> MOTIVO = createField(DSL.name("motivo"), SQLDataType.VARCHAR(100), this, "");

    private HistoricoPreco(Name alias, Table<HistoricoPrecoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HistoricoPreco(Name alias, Table<HistoricoPrecoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.historico_preco</code> table reference
     */
    public HistoricoPreco(String alias) {
        this(DSL.name(alias), HISTORICO_PRECO);
    }

    /**
     * Create an aliased <code>public.historico_preco</code> table reference
     */
    public HistoricoPreco(Name alias) {
        this(alias, HISTORICO_PRECO);
    }

    /**
     * Create a <code>public.historico_preco</code> table reference
     */
    public HistoricoPreco() {
        this(DSL.name("historico_preco"), null);
    }

    public <O extends Record> HistoricoPreco(Table<O> path, ForeignKey<O, HistoricoPrecoRecord> childPath, InverseForeignKey<O, HistoricoPrecoRecord> parentPath) {
        super(path, childPath, parentPath, HISTORICO_PRECO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class HistoricoPrecoPath extends HistoricoPreco implements Path<HistoricoPrecoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> HistoricoPrecoPath(Table<O> path, ForeignKey<O, HistoricoPrecoRecord> childPath, InverseForeignKey<O, HistoricoPrecoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private HistoricoPrecoPath(Name alias, Table<HistoricoPrecoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public HistoricoPrecoPath as(String alias) {
            return new HistoricoPrecoPath(DSL.name(alias), this);
        }

        @Override
        public HistoricoPrecoPath as(Name alias) {
            return new HistoricoPrecoPath(alias, this);
        }

        @Override
        public HistoricoPrecoPath as(Table<?> alias) {
            return new HistoricoPrecoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<HistoricoPrecoRecord, Integer> getIdentity() {
        return (Identity<HistoricoPrecoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HistoricoPrecoRecord> getPrimaryKey() {
        return Keys.HISTORICO_PRECO_PKEY;
    }

    @Override
    public List<ForeignKey<HistoricoPrecoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HISTORICO_PRECO__HISTORICO_PRECO_PRODUTO_ID_FKEY);
    }

    private transient ProdutoPath _produto;

    /**
     * Get the implicit join path to the <code>public.produto</code> table.
     */
    public ProdutoPath produto() {
        if (_produto == null)
            _produto = new ProdutoPath(this, Keys.HISTORICO_PRECO__HISTORICO_PRECO_PRODUTO_ID_FKEY, null);

        return _produto;
    }

    @Override
    public HistoricoPreco as(String alias) {
        return new HistoricoPreco(DSL.name(alias), this);
    }

    @Override
    public HistoricoPreco as(Name alias) {
        return new HistoricoPreco(alias, this);
    }

    @Override
    public HistoricoPreco as(Table<?> alias) {
        return new HistoricoPreco(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HistoricoPreco rename(String name) {
        return new HistoricoPreco(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HistoricoPreco rename(Name name) {
        return new HistoricoPreco(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HistoricoPreco rename(Table<?> name) {
        return new HistoricoPreco(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricoPreco where(Condition condition) {
        return new HistoricoPreco(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricoPreco where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricoPreco where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricoPreco where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistoricoPreco where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistoricoPreco where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistoricoPreco where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistoricoPreco where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricoPreco whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricoPreco whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
