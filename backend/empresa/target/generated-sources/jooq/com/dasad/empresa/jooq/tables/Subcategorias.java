/*
 * This file is generated by jOOQ.
 */
package com.dasad.empresa.jooq.tables;


import com.dasad.empresa.jooq.Indexes;
import com.dasad.empresa.jooq.Keys;
import com.dasad.empresa.jooq.Public;
import com.dasad.empresa.jooq.tables.Categorias.CategoriasPath;
import com.dasad.empresa.jooq.tables.PrecosRegionais.PrecosRegionaisPath;
import com.dasad.empresa.jooq.tables.Regioes.RegioesPath;
import com.dasad.empresa.jooq.tables.records.SubcategoriasRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Tabela de subcategorias de serviços vinculadas às categorias
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Subcategorias extends TableImpl<SubcategoriasRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.subcategorias</code>
     */
    public static final Subcategorias SUBCATEGORIAS = new Subcategorias();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubcategoriasRecord> getRecordType() {
        return SubcategoriasRecord.class;
    }

    /**
     * The column <code>public.subcategorias.id</code>.
     */
    public final TableField<SubcategoriasRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.subcategorias.categoria_id</code>.
     */
    public final TableField<SubcategoriasRecord, Integer> CATEGORIA_ID = createField(DSL.name("categoria_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.subcategorias.nome</code>.
     */
    public final TableField<SubcategoriasRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.subcategorias.descricao</code>.
     */
    public final TableField<SubcategoriasRecord, String> DESCRICAO = createField(DSL.name("descricao"), SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<SubcategoriasRecord, Object> STATUS = createField(DSL.name("status"), DefaultDataType.getDefaultDataType("\"public\".\"status_servico\"").nullable(false).defaultValue(DSL.field(DSL.raw("'ATIVO'::status_servico"), org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>public.subcategorias.tempo_medio_minutos</code>.
     */
    public final TableField<SubcategoriasRecord, Integer> TEMPO_MEDIO_MINUTOS = createField(DSL.name("tempo_medio_minutos"), SQLDataType.INTEGER, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<SubcategoriasRecord, Object> NIVEL_COMPLEXIDADE = createField(DSL.name("nivel_complexidade"), DefaultDataType.getDefaultDataType("\"public\".\"nivel_complexidade\"").nullable(false).defaultValue(DSL.field(DSL.raw("'MEDIA'::nivel_complexidade"), org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>public.subcategorias.preco_base</code>.
     */
    public final TableField<SubcategoriasRecord, BigDecimal> PRECO_BASE = createField(DSL.name("preco_base"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<SubcategoriasRecord, Object> UNIDADE_MEDIDA = createField(DSL.name("unidade_medida"), DefaultDataType.getDefaultDataType("\"public\".\"unidade_medida\"").nullable(false).defaultValue(DSL.field(DSL.raw("'SERVICO'::unidade_medida"), org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>public.subcategorias.materiais_tipicos</code>.
     */
    public final TableField<SubcategoriasRecord, String[]> MATERIAIS_TIPICOS = createField(DSL.name("materiais_tipicos"), SQLDataType.CLOB.array().defaultValue(DSL.field(DSL.raw("'{}'::text[]"), SQLDataType.CLOB.array())), this, "");

    /**
     * The column <code>public.subcategorias.data_criacao</code>.
     */
    public final TableField<SubcategoriasRecord, LocalDateTime> DATA_CRIACAO = createField(DSL.name("data_criacao"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.subcategorias.data_atualizacao</code>.
     */
    public final TableField<SubcategoriasRecord, LocalDateTime> DATA_ATUALIZACAO = createField(DSL.name("data_atualizacao"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Subcategorias(Name alias, Table<SubcategoriasRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Subcategorias(Name alias, Table<SubcategoriasRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Tabela de subcategorias de serviços vinculadas às categorias"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.subcategorias</code> table reference
     */
    public Subcategorias(String alias) {
        this(DSL.name(alias), SUBCATEGORIAS);
    }

    /**
     * Create an aliased <code>public.subcategorias</code> table reference
     */
    public Subcategorias(Name alias) {
        this(alias, SUBCATEGORIAS);
    }

    /**
     * Create a <code>public.subcategorias</code> table reference
     */
    public Subcategorias() {
        this(DSL.name("subcategorias"), null);
    }

    public <O extends Record> Subcategorias(Table<O> path, ForeignKey<O, SubcategoriasRecord> childPath, InverseForeignKey<O, SubcategoriasRecord> parentPath) {
        super(path, childPath, parentPath, SUBCATEGORIAS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SubcategoriasPath extends Subcategorias implements Path<SubcategoriasRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SubcategoriasPath(Table<O> path, ForeignKey<O, SubcategoriasRecord> childPath, InverseForeignKey<O, SubcategoriasRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SubcategoriasPath(Name alias, Table<SubcategoriasRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SubcategoriasPath as(String alias) {
            return new SubcategoriasPath(DSL.name(alias), this);
        }

        @Override
        public SubcategoriasPath as(Name alias) {
            return new SubcategoriasPath(alias, this);
        }

        @Override
        public SubcategoriasPath as(Table<?> alias) {
            return new SubcategoriasPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SUBCATEGORIAS_CATEGORIA, Indexes.IDX_SUBCATEGORIAS_STATUS);
    }

    @Override
    public Identity<SubcategoriasRecord, Integer> getIdentity() {
        return (Identity<SubcategoriasRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubcategoriasRecord> getPrimaryKey() {
        return Keys.SUBCATEGORIAS_PKEY;
    }

    @Override
    public List<UniqueKey<SubcategoriasRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_SUBCATEGORIA_NOME_CATEGORIA);
    }

    @Override
    public List<ForeignKey<SubcategoriasRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUBCATEGORIAS__SUBCATEGORIAS_CATEGORIA_ID_FKEY);
    }

    private transient CategoriasPath _categorias;

    /**
     * Get the implicit join path to the <code>public.categorias</code> table.
     */
    public CategoriasPath categorias() {
        if (_categorias == null)
            _categorias = new CategoriasPath(this, Keys.SUBCATEGORIAS__SUBCATEGORIAS_CATEGORIA_ID_FKEY, null);

        return _categorias;
    }

    private transient PrecosRegionaisPath _precosRegionais;

    /**
     * Get the implicit to-many join path to the
     * <code>public.precos_regionais</code> table
     */
    public PrecosRegionaisPath precosRegionais() {
        if (_precosRegionais == null)
            _precosRegionais = new PrecosRegionaisPath(this, null, Keys.PRECOS_REGIONAIS__PRECOS_REGIONAIS_SUBCATEGORIA_ID_FKEY.getInverseKey());

        return _precosRegionais;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.regioes</code> table
     */
    public RegioesPath regioes() {
        return precosRegionais().regioes();
    }

    @Override
    public List<Check<SubcategoriasRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("subcategorias_preco_base_check"), "((preco_base >= (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("subcategorias_tempo_medio_minutos_check"), "((tempo_medio_minutos > 0))", true)
        );
    }

    @Override
    public Subcategorias as(String alias) {
        return new Subcategorias(DSL.name(alias), this);
    }

    @Override
    public Subcategorias as(Name alias) {
        return new Subcategorias(alias, this);
    }

    @Override
    public Subcategorias as(Table<?> alias) {
        return new Subcategorias(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subcategorias rename(String name) {
        return new Subcategorias(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subcategorias rename(Name name) {
        return new Subcategorias(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subcategorias rename(Table<?> name) {
        return new Subcategorias(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subcategorias where(Condition condition) {
        return new Subcategorias(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subcategorias where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subcategorias where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subcategorias where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subcategorias where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subcategorias where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subcategorias where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subcategorias where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subcategorias whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subcategorias whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
